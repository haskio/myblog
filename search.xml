<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/%E5%85%B6%E4%BB%96/hello-world/</url>
    <content><![CDATA[<p>继续使用hexo记录文章</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>产品经理懂技术1.客户端和服务器</title>
    <url>/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%87%82%E6%8A%80%E6%9C%AF/pm2tech1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做系统规划或者部署的时候，总计会听到开发人员提到服务器，有时候还会提到应用服务器、数据库服务器等，这些服务器都是怎么划分？</p>
<p>有些产品人员可能可能会疑惑，我们的系统不是使用浏览器，为什么还要需要服务器？</p>
<p>现在就把这些事都讲一讲。</p>
<span id="more"></span>

<h2 id="为什么要有服务器"><a href="#为什么要有服务器" class="headerlink" title="为什么要有服务器"></a>为什么要有服务器</h2><p>客户端这个词因为在不同场景都会使用，所以会一些串场的情况。</p>
<ul>
<li>在架构中出现</li>
</ul>
<p>客户端&#x2F;服务端是一种架构模式，意思就是有一个业务的请求者和业务的响应者。</p>
<p>业务的请求者就被称为客户端，<br>业务的响应者就被称为服务端。</p>
<p>客户端和服务端都是业务的抽象说法，并不代表实际的物理现状或者具体数量，不是说两个用户就是两个客户端，三个服务器就是三个服务端。</p>
<p>例如你去超市买东西，在这个模式里你就是客户端，超市就是服务端。</p>
<p>这种模式也被称为C&#x2F;S模式，但是因为慢慢会后面一种实现方案冲突了，也就没人这么叫了，现在更多的是叫联网应用，因为服务端一般会部署另外的服务器上。</p>
<p>部署服务端的机器，就叫服务器。</p>
<p>与之相对应的就是单体应用，意思就是他不需要连服务端就可以自己运行，例如我们用到的计算器、画图等。</p>
<p>还有一种特殊的应用，从模式上是联网，但是部署的时候会把服务端和客户端部署在一起，所以<br>虽然没有服务器，但是也是有服务端的。<br>例如程序员做开发的时候，经常在自己电脑上启动一个服务端，就是这种情况。</p>
<p>当然也有一些应用是这样的情况，例如有个报表软件，号称是下载后即可使用，实际上是让用户下载了一个服务端，在自己电脑上启动起来，然后再进行访问。</p>
<h2 id="c-s模式、b-s模式又是什么"><a href="#c-s模式、b-s模式又是什么" class="headerlink" title="c&#x2F;s模式、b&#x2F;s模式又是什么"></a>c&#x2F;s模式、b&#x2F;s模式又是什么</h2><p>上面的客户端是相对于服务端来说的，是一种角色的说法。<br>而在c&#x2F;s模式、b&#x2F;s模式，都是对于这种架构的实现方案。<br>c&#x2F;s模式，是自己专门开发一个程序，用于实现业务功能，包括跟服务器通信，界面定义、业务处理等。<br>b&#x2F;s模式，是用浏览器作为客户端实现业务功能，实现以上的服务器通信、界面定义、业务处理等。</p>
<p>他们的优劣势在网上一搜一大把，更细的就不说了，这里列一些常规的<br>1、开发客户端，可以自己定义通信协议、界面、功能都很灵活，包括加密、动画以及各种复杂的操作都可以实现（只要技术水平可以达到）。优点是功能强大效率高，缺点是开发成本高<br>2、使用浏览器，只能使用浏览器支持的通信协议（http、https），功能也只能使用html+js支持的部分，形式只能是网页（这里的网页是泛指，浏览器可解析都包含）。优点是开发成本较低，缺点是受限于浏览器所提供的api。</p>
<p>b&#x2F;s也有一种特殊应用，就是只有页面，单独的一个html格式的文件。这类一般常见于浏览器的扩展，或者做文件分享时使用。例如做一个定时器功能的html页面，打开之后设置一个时间，到点了就会进行提醒。<br>之前流行过一段时间，但是受限于使用模式，慢慢就消退了。</p>
<p>无论是c&#x2F;s 还是b&#x2F;s 都是需要服务端。</p>
<h2 id="服务器，各种服务器都是怎么划分"><a href="#服务器，各种服务器都是怎么划分" class="headerlink" title="服务器，各种服务器都是怎么划分"></a>服务器，各种服务器都是怎么划分</h2><p>上面说了，运行服务端的机器就是服务器。其实这又是一个多场景串场的词语。</p>
<p>先说运行服务端的机器就是服务器，这时指的逻辑上的服务器。</p>
<p>服务端也是程序，按照服务端的结构，一般会分为应用服务、也就是经常说的tomcat之类、数据库服务，用于存储数据的，也就是经常说的mysql、oracle之类。再复杂点的会需要缓存服务，也就是经常说的memcache、redis之类。</p>
<p>在小型的服务端，这些程序一般会都装在一台服务器上。而在大型的服务端，例如供几百上千万的用户时，那么不同的应用会部署在独立的服务器上，就形成了应用服务器、数据库服务器、缓存服务器等，而且根据负载的不同，还会进行更大数量的扩容，例如应用服务器会有多台，数据库服务器也有多台等。</p>
<p>在物理上虽然会有多台应用服务器或者数据库服务器，但是上系统层面他的角色是唯一的，实现这种唯一的技术就是集群技术。<br>不同的应用程序所需要的集群技术是不一样的，例如tomcat的集群实现和mysql的集群实现就玩球不一样。<br>而且一般会有多种实现集群的方式和手段，不同的方式所能实现的效率和性能也不一样，这个后面再聊。</p>
<p>当说一台两台服务器的时候，是说相对于PC机或者个人机的物理服务器。我们办公使用的电脑是个人电脑，一般能满足日常使用即可，因为我们每天都会关机，虽然偶尔不关也没事，但是永久了就会有死机的可能。<br>。<br>而服务器则需要很高的稳定性，首先要需要满足几年的不断电运行（长期开机），然后要足够稳定，不能运行几天就死机。<br>个人电脑重启下就好了，但是服务器重启就会影响到很多用户（例如微信的服务器宕机，会影响多少人）？<br>服务器是高性能、高稳定性的电脑。</p>
<p>这也是服务器大多数使用linux系统的原因，因为linux系统足够稳定（不会动不动就出现死机蓝屏程序无法响应等问题）。</p>
<p>也有时候会听到说拿一台pc机当服务器，其实只要性能足够，或者对稳定性没要求（例如测试系统），这种情况也是可以的，但是切记不要跑正式环境或者重要数据。</p>
<p>毕竟个人电脑的主板、电源等没有经过严格的拷机，很容易出问题，到时候丢数据就麻烦了。</p>
]]></content>
      <categories>
        <category>产品经理懂技术</category>
      </categories>
  </entry>
  <entry>
    <title>产品经理懂技术系列</title>
    <url>/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%87%82%E6%8A%80%E6%9C%AF/pm2tech0/</url>
    <content><![CDATA[<p>科普讨论一些产品经理日常会遇见的技术概念和知识</p>
]]></content>
      <categories>
        <category>产品经理懂技术</category>
      </categories>
  </entry>
  <entry>
    <title>产品经理懂技术2.同步、异步</title>
    <url>/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%87%82%E6%8A%80%E6%9C%AF/pm2tech2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>异步&#x2F;同步，是处理模式的一种机制，一般用于函数、接口或者业务处理。</p>
<span id="more"></span>

<h4 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h4><p>假设有a函数和b函数， a函数需要调用b函数。 在a调用b函数后，但是b函数还没有返回结果之前，a函数必须一直在等待，必须等b处理完结果后，a才会继续往下执行。</p>
<p>举个例子：a去银行营业厅办事，等轮到a去窗口了，a说我要办某某业务，然后里面的营业员就开始办理，然后a要一直在窗口等着，直到里面营业员办完，才可以离开。</p>
<p>a在窗口等待，走不了，这种模式就叫同步模式，这种状态，被称为被阻塞，因为a的行动被阻在这个节点了。</p>
<h4 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h4><p>假设有a函数和b函数， a函数需要调用b函数。 在a调用b函数后，不需要等待b函数返回结果，就会继续执行。</p>
<p>举个例子：a去饭店吃饭，点了餐之后，可以随便溜达，等饭店做好之后，会进行叫号。a听到叫号后，去取餐，然后进餐。<br>在等待的时候，a可以随便溜达随意干什么（我们不讨论a出饭店之后溜走的事，只是说这个状态）。</p>
<p>这种模式就叫异步模式，a不专门等待的状态，被称为非阻塞式。</p>
<p>叫号，属于回调函数（回调地址）， 是a给b留下，b处理完后通知a的方式。</p>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>同步&#x2F;异步模式可以用在函数、服务、以及业务之间。</p>
<p>产品经理在设计业务时，也可以参考同步、异步的这种机制。</p>
<p>耦合性比较强、业务数据时间短的业务，一般使用同步模式，例如注册用户、新增用户等。<br>例如注册用户，你不能没等注册就进入登录或者首页，因为没有注册完，用户进入对应页面也无法进行登录或者使用。</p>
<p>耦合性没那么强，业务处理时间比较长的业务，则推荐使用异步模式，例如批量导入用户，上传文件等。</p>
<p>例如批量导入用户，一般的处理流程是，第一步先将文件上传到服务器，第二步调用创建用户功能进行创建。<br>如果我们用同步模式，则用户等待的时间则为上传文件的加上+ 创建用户的时间。  后者的时间一般来说会比较长。这就需要用户一直在页面上等待，不但用户体验不好，而且还容易操作页面超时，让用户以为操作失败，从而重复操作。</p>
<p>这时候就可以使用异步模式，在上传完成后，就告诉用户已经完成了了文件上传可以关闭网页，后面创建用户转入后台，等创建之后会通知用户创建的结果即可。</p>
<h4 id="其他同类词-同步服务"><a href="#其他同类词-同步服务" class="headerlink" title="其他同类词-同步服务"></a>其他同类词-同步服务</h4><p>这里的同步其实是对服务的一个修辞，说明这个服务是用于数据同步的。类似的还可以有消息服务、订单服务等，跟上面的机制模式没有关系。</p>
]]></content>
      <categories>
        <category>产品经理懂技术</category>
      </categories>
  </entry>
</search>
